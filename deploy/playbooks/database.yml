---
#-----------------------------------------------------------------------------------------------------------
# Playbook that installs the Codekvast Database, which is served by MariaDB
#-----------------------------------------------------------------------------------------------------------
- name: Codevast Database Server
  hosts: tag_role_database

  become: yes

  vars_files:
  - vars/secrets.yml
  - vars/common.yml

  vars:
    service_name: mariadb
    server_type: database

    mariadb_version: '10.4'
    mysql_root_password_update: false
    mysql_user_password_update: true
    mysql_backup_dir: '/backups/mariadb'
    mysql_slow_query_log_enabled: true
    mysql_slow_query_log_file: '/var/log/mysql/mysql-slow.log'
    mysql_slow_query_time: 5
    mysql_packages:
    - mariadb-client
    - mariadb-server
    - python-mysqldb
    mysql_datadir: /data/mysql
    mysql_log_error: '/var/log/mysql/error.log'

    mysql_databases:
    - name: codekvast
      encoding: utf8
      collation: utf8_general_ci

    mysql_users:
    - name: 'codekvast'
      password: '{{ mariadb_application_password }}'
      priv: codekvast.*:ALL
      host: '%'

  pre_tasks:
  - name: Create a partition table for /dev/xvdf
    parted: device=/dev/xvdf number=1 state=present
    register: partition_table

  - debug: var=partition_table
    when: _debug is defined and _debug

  - name: Create ext4 file system on /dev/xvdf
    filesystem: dev=/dev/xvdf1 fstype=ext4
    register: fs

  - debug: var=fs
    when: _debug is defined and _debug

  - name: "Create the directory /data"
    file: path=/data state=directory

  - name: "Mount /dev/xvdf1 on /data"
    mount: src=/dev/xvdf1 path=/data state=mounted fstype=ext4

#----------------------------------------
  - name: Create a partition table for /dev/xvdg
    parted: device=/dev/xvdg number=1 state=present
    register: partition_table

  - debug: var=partition_table
    when: _debug is defined and _debug

  - name: Create ext4 file system on /dev/xvdg
    filesystem: dev=/dev/xvdg1 fstype=ext4
    register: fs

  - debug: var=fs
    when: _debug is defined and _debug

  - name: "Create the directory /backups"
    file: path=/backups state=directory

  - name: "Mount /dev/xvdg1 on /backups"
    mount: src=/dev/xvdg1 path=/backups state=mounted fstype=ext4

  - set_fact: old_mysql_backup_dir=/var/backups/mariadb
  - set_fact: new_mysql_backup_dir=/backups/mariadb

  - name: "Check if {{ old_mysql_backup_dir }} exists"
    stat: path={{ old_mysql_backup_dir }}
    register: st1

  - name: "Check if {{ new_mysql_backup_dir }} exists"
    stat: path={{ new_mysql_backup_dir }}
    register: st2

  - name: "Move MariaDB backups from {{ old_mysql_backup_dir }} to {{ new_mysql_backup_dir }}"
    command: mv {{ old_mysql_backup_dir }} {{ new_mysql_backup_dir }} creates={{ new_mysql_backup_dir }} removes={{ old_mysql_backup_dir }}
    when: st1.stat.isdir is defined and st1.stat.isdir and not st2.stat.isdir is defined

  #----------------------------------------
  - set_fact: standard_datadir=/var/lib/mysql
  - name: "Check if {{ standard_datadir }} exists"
    stat: path={{ standard_datadir }}
    register: st1

  - name: "Check if {{ mysql_datadir }}/mysql exists"
    stat: path={{ mysql_datadir }}/mysql
    register: st2

  - name: "Stop MariaBD before moving {{ standard_datadir }} to {{ mysql_datadir }}"
    service: name=mysql state=stopped
    when: st1.stat.isdir is defined and st1.stat.isdir and not st2.stat.isdir is defined

  - name: "Move old MariaDB databases from {{ standard_datadir }} to {{ mysql_datadir }}"
    command: mv {{ standard_datadir }} {{ mysql_datadir }} creates={{ mysql_datadir }} removes={{ standard_datadir }}
    when: st1.stat.isdir is defined and st1.stat.isdir and not st2.stat.isdir is defined

  - set_fact:
      customer: "{{ tags.Customer }}"
      env: "{{ tags.Env }}"
      s3_bucket_location: "{{ placement.region }}"

  - set_fact:
      s3_database_backup_bucket: "io.codekvast.{{ customer|lower }}.{{ env|lower }}.backup"

  - name: Install s3cmd and gzip
    package: name={{ item }} state=present
    with_items:
      - s3cmd
      - gzip

  - name: Install backup scripts
    template: src=database/{{ item }}.j2 dest=/root/{{ item }} mode=755
    with_items:
      - mysqldump-backup
      - mysqldump-restore
      - s3cfg

  - name: Check S3 access credentials
    shell: s3cmd --config=/root/s3cfg ls s3://{{ s3_database_backup_bucket }}
    changed_when: False

  roles:
  - {role: Datadog.datadog, tags: [metrics,monitoring,datadog] }
  - {role: codekvast.datadog, tags: [metrics,monitoring,datadog] }
  - {role: geerlingguy.mysql, tags: [database, mariadb] }

  post_tasks:
  - name: Link backup scripts to /etc/cron.daily
    file: src=/root/{{ item }} dest=/etc/cron.daily/{{ item }} state=link
    with_items:
    - mysqldump-backup

  - name: Create MySQL user for Datadog
    shell: mysql -e "{{ item }};"
    ignore_errors: yes
    with_items:
    - "CREATE USER 'datadog'@'localhost' IDENTIFIED BY '{{ mariadb_datadog_password }}'"
    - "GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'localhost' WITH MAX_USER_CONNECTIONS 5"
    - "GRANT PROCESS ON *.* TO 'datadog'@'localhost'"
    - "GRANT SELECT ON performance_schema.* TO 'datadog'@'localhost'"
    notify: restart datadog-agent

  - name: Make sure Datadog Agent can tail MariaDB log files
    user: name=dd-agent groups=adm append=yes
    notify: restart datadog-agent

  - name: Configure Datadog Agent for MariaDB
    template: src=database/datadog/config.yaml.j2 dest=/etc/datadog-agent/conf.d/mysql.d/conf.yaml mode=644
    notify: restart datadog-agent

  - name: Remove obsolete stuff
    file: path={{ item }} state=absent
    with_items:
    - /backups/mariadb/mariabackup-extra.tar.gz
    - /backups/mariadb/mariabackup-friday.tar.gz
    - /backups/mariadb/mariabackup-monday.tar.gz
    - /backups/mariadb/mariabackup-saturday.tar.gz
    - /backups/mariadb/mariabackup-sunday.tar.gz
    - /backups/mariadb/mariabackup-thursday.tar.gz
    - /backups/mariadb/mariabackup-tuesday.tar.gz
    - /backups/mariadb/mariabackup-wednesday.tar.gz
    - /backups/mariadb/xtrabackup-extra.tar.gz
    - /backups/mariadb/xtrabackup-friday.tar.gz
    - /backups/mariadb/xtrabackup-monday.tar.gz
    - /backups/mariadb/xtrabackup-saturday.tar.gz
    - /backups/mariadb/xtrabackup-sunday.tar.gz
    - /backups/mariadb/xtrabackup-thursday.tar.gz
    - /backups/mariadb/xtrabackup-tuesday.tar.gz
    - /backups/mariadb/xtrabackup-wednesday.tar.gz
    - /etc/cron.daily/mariabackup-backup
    - /etc/cron.daily/mariabackup-restore
    - /etc/cron.daily/xtrabackup-backup
    - /root/mariabackup-backup
    - /root/mariabackup-restore
    - /root/xtrabackup-backup
    - /root/xtrabackup-restore
