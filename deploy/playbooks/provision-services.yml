---
#---------------------------------------------------------------
# Playbook which provisions the AWS Fargate infrastructure
#---------------------------------------------------------------
- name:         Provision AWS Fargate
  hosts:        localhost
  connection:   local
  gather_facts: no

  vars_files:
    - vars/common.yml

  vars:
    env:               staging
    dns_suffix:        "{{ ('-staging', '')[env == 'prod'] }}.codekvast.io"
    server_url:        "https://api{{ dns_suffix }}"
    force:             false
    heap_dumps_bucket: "io.codekvast.heap-dumps"
    heap_dumps_path:   "/codekvast/dumps"  # also see google-jib.gradle
    default:
      taskdefinition:
        cpu:    256
        memory: 1024

    services:
      - name:           backoffice
        cnames:
          - backoffice
        replicas:
          staging: 1
          prod:    2
        db_connections: 2
        secrets:
          - name:      SPRING_MAIL_USERNAME
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/mail/username"
          - name:      SPRING_MAIL_PASSWORD
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/mail/password"
        envvars: [ ]

      - name:           dashboard
        cnames:
          - dashboard
        replicas:
          staging: 1
          prod:    2
        db_connections: 4
        secrets: [ ]
        envvars: [ ]

      - name:           intake
        cnames:
          - api
          - intake
        replicas:
          staging: 1
          prod:    2
        db_connections: 6
        secrets: [ ]
        envvars:
          - name:  CODEKVAST_INTAKE_FILE_IMPORT_QUEUE_PATH
            value: /codekvast/intake

      - name:               login
        cnames:
          - login
        taskdefinition:
          memory: 512
        replicas:
          staging: 1
          prod:    2
        db_connections:     2
        stickiness_enabled: true
        secrets:
          - name:      CODEKVAST_LOGIN_CIPHER_SECRET
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/{{ env }}/login/cipherSecret"
          - name:      CODEKVAST_LOGIN_HEROKU_API_PASSWORD
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/heroku/api/password"
          - name:      CODEKVAST_LOGIN_HEROKU_API_SSO_SALT
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/heroku/api/ssoSalt"
          - name:      CODEKVAST_LOGIN_HEROKU_O_AUTH_CLIENT_ID
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/heroku/oauth/clientId"
          - name:      CODEKVAST_LOGIN_HEROKU_O_AUTH_CLIENT_SECRET
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/heroku/oauth/clientSecret"
          - name:      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_FACEBOOK_CLIENT_ID
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/oauth2/{{ env }}/facebook/client-id"
          - name:      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_FACEBOOK_CLIENT_SECRET
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/oauth2/{{ env }}/facebook/client-secret"
          - name:      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_ID
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/oauth2/{{ env }}/github/client-id"
          - name:      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/oauth2/{{ env }}/github/client-secret"
          - name:      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/oauth2/{{ env }}/google/client-id"
          - name:      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET
            valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/oauth2/{{ env }}/google/client-secret"
        envvars:
          - name:  CODEKVAST_LOGIN_HEROKU_CODEKVAST_URL
            value: "https://api{{ dns_suffix }}"

    common:
      tags:
        Owner:      Codekvast
        Env:        "{{ env }}"
        LaunchType: Fargate
      secrets:
        - name:      AWS_ACCESS_KEY_ID
          valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/s3/api_key"
        - name:      AWS_SECRET_ACCESS_KEY
          valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/s3/secret_key"
        - name:      SPRING_DATASOURCE_PASSWORD
          valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/{{ env }}/mariadb/application_password"
        - name:      SPRING_RABBITMQ_ADDRESSES
          valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/{{ env }}/rabbitmq/url"
        - name:      CODEKVAST_COMMON_JWT_SECRET
          valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/{{ env }}/jwt_secret"
        - name:      CODEKVAST_COMMON_SLACK_WEBHOOK_TOKEN
          valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/slackWebhookToken"
        - name:      MANAGEMENT_METRICS_EXPORT_DATADOG_API_KEY
          valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/datadog/apiKey"
        - name:      MANAGEMENT_METRICS_EXPORT_DATADOG_APPLICATION_KEY
          valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/datadog/applicationKey"
      envvars:
        - name:  AWS_REGION
          value: "{{ aws_region }}"
        - name:  CODEKVAST_ENVIRONMENT
          value: "{{ env }}"
        - name:  CODEKVAST_SERVER_URL
          value: "{{ server_url }}"
        - name:  CODEKVAST_COMMON_ENVIRONMENT
          value: "{{ env }}"
        - name:  CODEKVAST_COMMON_DASHBOARD_BASE_URL
          value: "https://dashboard{{ dns_suffix }}"
        - name:  CODEKVAST_COMMON_LOGIN_BASE_URL
          value: "https://login{{ dns_suffix }}"
        - name:  CODEKVAST_COMMON_HEAP_DUMPS_PATH
          value: "{{ heap_dumps_path }}"
        - name:  CODEKVAST_COMMON_HEAP_DUMPS_BUCKET
          value: "{{ heap_dumps_bucket }}"
        - name:  SPRING_DATASOURCE_URL
          value: "jdbc:mariadb://db-{{ env }}.codekvast.io/codekvast"
    rds:
      tags:
        Owner: Codekvast
        Env:   "{{ env }}"
        RDS:   "true"

    deployment_configuration:
      prod:
        minimum_healthy_percent: 50
        maximum_percent:         150
      staging:
        minimum_healthy_percent: 100
        maximum_percent:         200

  tasks:
    - name:     Find VPC id
      ec2_vpc_net_info:
        region:  "{{ aws_region }}"
        profile: codekvast
        filters:
          "tag:Owner": "Codekvast"
          "tag:Env":   "{{ env }}"
      tags: [ once, service ]
      register: vpc_info

    - set_fact: vpc_id="{{ vpc_info.vpcs[0].vpc_id }}"
      tags: [ once, service ]

    - debug: var=vpc_id
      when:  _debug is defined and _debug
      tags: [ once, service ]

    - name:     Find EC2 subnets
      ec2_vpc_subnet_info:
        profile: codekvast
        region:  "{{ aws_region }}"
        filters:
          "tag:Owner": "Codekvast"
          "tag:Env":   "{{ env }}"
      register: subnet_info
      tags: [ once, efs, service ]

    - debug: var=subnet_info
      when:  _debug is defined and _debug
      tags: [ once, efs, service ]

    - name:     Find EC2 backend security group
      ec2_group_info:
        profile: codekvast
        region:  "{{ aws_region }}"
        filters:
          group_name: "codekvast-{{ env }}-backend"
      register: sg_backend
      tags: [ once, efs, service ]

    - debug: var=sg_backend
      when:  _debug is defined and _debug
      tags: [ once, efs, service ]

    - name: Create ALB target groups
      elb_target_group:
        profile:                       codekvast
        region:                        "{{ aws_region }}"
        vpc_id:                        "{{ vpc_id }}"
        name:                          "codekvast-{{ env }}-{{ item.name }}"
        protocol:                      http
        port:                          "8080"
        health_check_protocol:         http
        health_check_port:             "9080"
        health_check_path:             /management/health/loadBalancer
        health_check_interval:         10
        health_check_timeout:          5
        healthy_threshold_count:       2
        unhealthy_threshold_count:     6
        deregistration_delay_timeout:  10
        state:                         present
        stickiness_enabled:            "{{ item.stickiness_enabled | default(false) }}"
        stickiness_lb_cookie_duration: 60
        stickiness_type:               lb_cookie
        tags:                          "{{ common.tags }}"
        target_type:                   ip
      loop: "{{ services }}"
      loop_control:
        label: "{{ item.name }}"
      tags: once

    - name:     Lookup target groups
      elb_target_group_info:
        profile: codekvast
        region:  "{{ aws_region }}"
      register: target_group_info
      tags:     service

    - debug: var=target_group_info
      when:  _debug is defined and _debug
      tags:  service

    - name:     Create Application Load Balancer
      elb_application_lb:
        region:              "{{ aws_region }}"
        profile:             codekvast
        name:                "codekvast-{{ env }}"
        state:               present
        deletion_protection: "{{ ('no', 'yes')[env == 'prod'] }}"
        scheme:              internet-facing
        security_groups:
          - "codekvast-{{ env }}-frontend"
        subnets:             "{{ subnet_info.subnets|map(attribute='id')|list }}"
        tags:                "{{ common.tags }}"
        listeners:
          - Protocol:  HTTPS
            Port:      443
            Certificates:
              - CertificateArn: "{{ ssl_certificates[aws_region] }}"
            SslPolicy: ELBSecurityPolicy-2015-05
            DefaultActions:
              - Type:            forward
                TargetGroupName: "codekvast-{{ env }}-login"
            Rules:
              - Conditions:
                  - Field: host-header
                    Values:
                      - "api{{ dns_suffix }}"
                Priority: '1'
                Actions:
                  - Type:            forward
                    TargetGroupName: "codekvast-{{ env }}-intake"
              - Conditions:
                  - Field: host-header
                    Values:
                      - "intake{{ dns_suffix }}"
                Priority: '2'
                Actions:
                  - Type:            forward
                    TargetGroupName: "codekvast-{{ env }}-intake"
              - Conditions:
                  - Field: host-header
                    Values:
                      - "dashboard{{ dns_suffix }}"
                Priority: '3'
                Actions:
                  - Type:            forward
                    TargetGroupName: "codekvast-{{ env }}-dashboard"
              - Conditions:
                  - Field: host-header
                    Values:
                      - "backoffice{{ dns_suffix }}"
                Priority: '4'
                Actions:
                  - Type:            forward
                    TargetGroupName: "codekvast-{{ env }}-backoffice"
        wait:                yes
      register: alb
      tags:     once

    - debug: var=alb
      when:  _debug is defined and _debug
      tags:  once

    - set_fact: alb_dns_name="{{ alb.dns_name }}"
      tags:     once

    - name: Define load balancer's CNAMEs
      route53:
        profile:   codekvast # in ~/.boto
        command:   create
        overwrite: yes
        record:    "{{ item.1 }}{{ dns_suffix }}"
        value:     "{{ alb_dns_name }}"
        ttl:       600
        type:      CNAME
        zone:      codekvast.io
      with_subelements:
        - "{{ services }}"
        - cnames
      loop_control:
        label: "{{ item.1 }}{{ dns_suffix }}"
      tags: once

    - name: Create ECR registries
      ecs_ecr:
        name:    "codekvast/{{ item.name }}"
        profile: codekvast
        region:  "{{ aws_region }}"
        state:   present
      loop: "{{ services }}"
      loop_control:
        label: "{{ item.name }}"
      tags: once

    - name: "Create the S3 bucket {{ heap_dumps_bucket }}"
      s3_bucket:
        profile: codekvast
        region:  "{{ aws_region }}"
        name:    "{{ heap_dumps_bucket }}"
        tags:
          Owner: Codekvast
      tags: once

    - name: "Set up a lifecycle rule for the S3 bucket {{ heap_dumps_bucket }}"
      s3_lifecycle:
        profile:         codekvast
        region:          "{{ aws_region }}"
        rule_id:         "Expire old heap dumps"
        name:            "{{ heap_dumps_bucket }}"
        expiration_days: 14
        status:          enabled
        state:           present
      tags: once

    - name: Define ECS cluster
      ecs_cluster:
        profile: codekvast
        region:  "{{ aws_region }}"
        name:    "codekvast-{{ env }}"
        state:   present
      tags: once

    - name: Define an EFS volume
      efs:
        profile: codekvast
        region:  "{{ aws_region }}"
        name:    "codekvast-{{ env }}"
        state:   present
        targets:
          - subnet_id: "{{ subnet_info.subnets[0].id }}"
            security_groups:
              - "{{ sg_backend.security_groups[0].group_id }}"
          - subnet_id: "{{ subnet_info.subnets[1].id }}"
            security_groups:
              - "{{ sg_backend.security_groups[0].group_id }}"
        tags:
          Name:  "codekvast-{{ env }}"
          Owner: Codekvast
          Env:   "{{ env }}"
      tags: [ once, efs ]

    - name:     Lookup EFS volume
      efs_info:
        profile: codekvast
        region:  "{{ aws_region }}"
        name:    "codekvast-{{ env }}"
      register: efs_info
      tags: [ once, service, efs ]

    - debug: var=efs_info
      when:  _debug is defined and _debug
      tags: [ once, service, efs ]

    - name:     Define the ECS tasks
      ecs_taskdefinition:
        profile:            codekvast
        region:             "{{ aws_region }}"
        cpu:                "{{ item.taskdefinition.cpu | default(default.taskdefinition.cpu) }}"
        memory:             "{{ item.taskdefinition.memory | default(default.taskdefinition.memory) }}"
        family:             "codekvast-{{ item.name }}"
        launch_type:        FARGATE
        network_mode:       awsvpc
        state:              present
        execution_role_arn: "arn:aws:iam::{{ aws_account }}:role/Codekvast-ECS-task"
        volumes:
          - name: "codekvast-{{ env }}"
            efsVolumeConfiguration:
              fileSystemId: "{{ efs_info.efs[0].file_system_id }}"
        containers:
          - name:        "codekvast-{{ item.name }}"
            image:       "{{ aws_account }}.dkr.ecr.{{ aws_region}}.amazonaws.com/codekvast/{{ item.name }}:latest"
            essential:   true
            secrets:     "{{ common.secrets + item.secrets }}"
            environment: "{{ common.envvars + item.envvars + computed.envvars }}"
            mountPoints:
              - containerPath: /codekvast
                sourceVolume:  "codekvast-{{ env }}"
            portMappings:
              - containerPort: 8080
                hostPort:      8080
              - containerPort: 9080
                hostPort:      9080
            logConfiguration:
              logDriver: awsfirelens
              options:
                Name:       datadog
                Host:       http-intake.logs.datadoghq.com
                dd_service: "codekvast-{{ item.name }}"
                dd_tags:    "Env:{{ env }}"
                TLS:        "on"
                provider:   ecs
              secretOptions:
                - name:      apikey
                  valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/datadog/apiKey"

          - name:      log-router
            image:     906394416424.dkr.ecr.{{ aws_region }}.amazonaws.com/aws-for-fluent-bit:latest
            essential: true
            firelensConfiguration:
              type: fluentbit
              options:
                enable-ecs-log-metadata: "true"
                config-file-type:        file
                config-file-value:       /fluent-bit/configs/parse-json.conf

          - name:  "datadog-agent"
            image: "datadog/agent:latest"
            secrets:
              - name:      DD_API_KEY
                valueFrom: "arn:aws:ssm:{{ aws_region }}:{{ aws_account }}:parameter/codekvast/datadog/apiKey"
            environment:
              - name:  ECS_FARGATE
                value: true
              - name:  DD_DOGSTATSD_NON_LOCAL_TRAFFIC
                value: true
      vars:
        computed:
          envvars:
            - name:  SPRING_PROFILES_ACTIVE
              value: "{{ item.name }}-fargate"
            - name:  CODEKVAST_COMMON_DNS_CNAME
              value: "{{ item.name }}{{ dns_suffix }}"
            - name:  SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE
              value: "{{ item.db_connections }}"
            - name:  MANAGEMENT_METRICS_TAGS_SERVICE
              value: "codekvast-{{ item.name }}"
            - name:  MANAGEMENT_METRICS_TAGS_ENV
              value: "{{ env }}"
      loop:     "{{ services }}"
      loop_control:
        label: "codekvast-{{ item.name }}"
      register: ecs_taskdefs
      tags: [ service, efs ]

    - debug: var=ecs_taskdefs
      tags:  service
      when:  _debug is defined and _debug

    - name:     Define ECS services
      ecs_service:
        profile:                           codekvast
        region:                            "{{ aws_region }}"
        cluster:                           "codekvast-{{ env }}"
        desired_count:                     "{{ item.replicas[env] }}"
        deployment_configuration:          "{{ deployment_configuration[env] }}"
        launch_type:                       FARGATE
        task_definition:                   "codekvast-{{ item.name }}"
        load_balancers:
          - targetGroupArn: "{{ target_group_info.target_groups | json_query(target_group_arn_query) | join('') }}"
            containerName:  "codekvast-{{ item.name }}"
            containerPort:  8080
        name:                              "{{ item.name }}"
        force_new_deployment:              "{{ force }}"
        health_check_grace_period_seconds: 300
        network_configuration:
          assign_public_ip: yes
          subnets:          "{{ subnet_info.subnets|map(attribute='id')|list }}"
          security_groups:
            - "codekvast-{{ env }}-backend"
        state:                             present
      vars:
        target_group_arn_query: "[?target_group_name == 'codekvast-{{ env }}-{{ item.name }}'].target_group_arn"
      loop:     "{{ services }}"
      loop_control:
        label: "codekvast-{{ item.name }}"
      register: service_info
      tags:     service

    - debug: var=service_info
      tags:  service
      when:  _debug is defined and _debug
