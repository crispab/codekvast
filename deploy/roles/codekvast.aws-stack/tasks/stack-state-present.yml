---
- name: "Building {{ stack.env }} stack for customer '{{ stack.customer }}'"
  debug: var=stack
  when: _debug is defined and _debug

- name: Create VPC
  local_action:
    module: ec2_vpc_net
    region: "{{ aws_region }}"
    profile: codekvast
    state: "{{ stack.state }}"
    name: "{{ aws_stack_name }}"
    cidr_block: "{{ stack.cidr_base }}.0.0/16"
    tags: "{{ aws_common_tags }}"
  register: net

- debug: var=net
  when: _debug is defined and _debug

- set_fact: vpc_id="{{ net.vpc.id }}"

- name: Create VPC internet gateway
  local_action:
    module: ec2_vpc_igw
    region: "{{ aws_region }}"
    profile: codekvast
    state: "{{ stack.state }}"
    vpc_id: "{{ vpc_id }}"
  register: igw

- debug: var=igw
  when: _debug is defined and _debug

- name: Create VPC subnet
  local_action:
    module: ec2_vpc_subnet
    region: "{{ aws_region }}"
    profile: codekvast
    vpc_id: "{{ vpc_id }}"
    state: "{{ stack.state }}"
    az: "{{ aws_az }}"
    cidr: "{{ stack.cidr_base }}.1.0/24"
    resource_tags: "{{ aws_common_tags }}"
  register: subnet

- debug: var=subnet
  when: _debug is defined and _debug

- set_fact: subnet_id="{{ subnet.subnet.id }}"

- name: Set up subnet route table
  local_action:
    module: ec2_vpc_route_table
    region: "{{ aws_region }}"
    profile: codekvast
    vpc_id: "{{ vpc_id }}"
    tags: "{{ aws_common_tags }}"
    subnets:
      - "{{ subnet_id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
  register: route_table

- debug: var=route_table
  when: _debug is defined and _debug

- name: Create frontend security group
  local_action:
    module: ec2_group
    region: "{{ aws_region }}"
    profile: codekvast
    vpc_id: "{{ vpc_id }}"
    state: "{{ stack.state }}"
    name: "codekvast-{{ stack.customer }}-{{ stack.env }}-frontend"
    description: "Codekvast internet-facing security group"
    rules:
    - proto: tcp
      ports:
      - 80
      - 443
      cidr_ip: 0.0.0.0/0

- name: Create backend security group
  local_action:
    module: ec2_group
    region: "{{ aws_region }}"
    profile: codekvast
    vpc_id: "{{ vpc_id }}"
    state: "{{ stack.state }}"
    name: "codekvast-{{ stack.customer }}-{{ stack.env }}-backend"
    description: "Codekvast backend access"
    rules:
    - proto: tcp
      ports:
      - 80
      - 9080
      - 9081
      group_name: "codekvast-{{ stack.customer }}-{{ stack.env }}-frontend"
      group_desc: "Codekvast internet-facing security group"
    - proto: tcp
      ports:
      - 9080
      - 9081
      group_name: "codekvast-{{ stack.customer }}-{{ stack.env }}-management"
      group_desc: "Codekvast management access"

- name: Create database security group
  local_action:
    module: ec2_group
    region: "{{ aws_region }}"
    profile: codekvast
    vpc_id: "{{ vpc_id }}"
    state: "{{ stack.state }}"
    name: "codekvast-{{ stack.customer }}-{{ stack.env }}-database"
    description: "Codekvast database access"
    rules:
    - proto: tcp
      ports:
      - 3306
      group_name: "codekvast-{{ stack.customer }}-{{ stack.env }}-backend"
      group_desc: "Codekvast backend access"

- name: curl http://whatismyip.akamai.com/
  uri:
    url: http://whatismyip.akamai.com/
    return_content: yes
  register: my_ip
  changed_when: false

- debug: var=my_ip
  when: _debug is defined and _debug

- name: Create management security group
  local_action:
    module: ec2_group
    region: "{{ aws_region }}"
    profile: codekvast
    vpc_id: "{{ vpc_id }}"
    state: "{{ stack.state }}"
    name: "codekvast-{{ stack.customer }}-{{ stack.env }}-management"
    description: "Codekvast management access"
    purge_rules: false
    rules:
    - proto: tcp
      ports:
      - 22
      - 3306
      - 8080
      - 8081
      - 9080
      - 9081
      cidr_ip: "{{ my_ip.content }}/32"

- set_fact:
    role_tag_database:
      Name: "Codekvast-{{ stack.customer }}-{{ stack.env }}-database"
      role: "database"
      Customer: "{{ stack.customer }}"
      Env: "{{ stack.env }}"
      Owner: Codekvast
    role_tag_backend:
      Name: "Codekvast-{{ stack.customer }}-{{ stack.env }}-backend"
      role: "backend"
      Customer: "{{ stack.customer }}"
      Env: "{{ stack.env }}"
      Owner: Codekvast

- name: Create EC2 database instance
  local_action:
    module: ec2
    region: "{{ aws_region }}"
    profile: codekvast # in ~/.boto
    key_name: codekvast
    assign_public_ip: yes
    vpc_subnet_id: "{{ subnet_id }}"
    groups:
    - "codekvast-{{ stack.customer }}-{{ stack.env }}-database"
    - "codekvast-{{ stack.customer }}-{{ stack.env }}-management"
    image: "{{ aws_ami_id }}"
    instance_type: "{{ stack.db_instance_type }}"
    instance_profile_name: "{{ ec2_instance_profile_name }}"
    user_data: "{{ lookup('file', 'files/ubuntu-cloud-init.sh') }}"
    exact_count: 1
    count_tag: "{{ role_tag_database }}"
    instance_tags: "{{ role_tag_database }}"
    termination_protection: "{{ ('no', 'yes')[stack.env == 'prod'] }}"
    wait: yes
  register: ec2database

- debug: var=ec2database
  when: _debug is defined and _debug

- set_fact: database_instance_id="{{ ec2database.tagged_instances[0].id }}"

- debug: var=database_instance_id
  when: _debug is defined and _debug

- name: Create EC2 backend instances
  local_action:
    module: ec2
    region: "{{ aws_region }}"
    profile: codekvast # in ~/.boto
    key_name: codekvast
    assign_public_ip: yes
    vpc_subnet_id: "{{ subnet_id }}"
    groups:
    - "codekvast-{{ stack.customer }}-{{ stack.env }}-backend"
    - "codekvast-{{ stack.customer }}-{{ stack.env }}-management"
    image: "{{ aws_ami_id }}"
    instance_type: "{{ stack.backend_instance_type }}"
    instance_profile_name: "{{ ec2_instance_profile_name }}"
    user_data: "{{ lookup('file', 'files/ubuntu-cloud-init.sh') }}"
    exact_count: "{{ stack.backend_count | default(1) }}"
    count_tag: "{{ role_tag_backend }}"
    instance_tags: "{{ role_tag_backend }}"
    termination_protection: "{{ ('no', 'yes')[stack.env == 'prod'] }}"
    wait: yes
  register: ec2backends

- debug: var=ec2backends
  when: _debug is defined and _debug

- set_fact: backend_instance_ids="{{ ec2backends.tagged_instances|map(attribute='id') | list }}"

- debug: var=backend_instance_ids
  when: _debug is defined and _debug

- name: Refresh external EC2 cache
  command: "{{ inventory_dir }}/ec2.py --refresh-cache"
  when: ec2database.changed or ec2backends.changed

- name: Refresh in-memory EC2 cache
  meta: refresh_inventory
  when: ec2database.changed or ec2backends.changed

- name: Create Elastic Load Balancer
  local_action:
    module: ec2_elb_lb
    region: "{{ aws_region }}"
    profile: codekvast
    name: "{{ aws_stack_name }}"
    instance_ids: "{{ backend_instance_ids }}"
    stickiness:
      type:  application
      cookie: "{{ settings.session.cookie.name }}"
      enabled: yes
    listeners:
    - protocol: http
      load_balancer_port: 80
      instance_port: 80
      proxy_protocol: True
    - protocol: https
      load_balancer_port: 443
      instance_protocol: http
      instance_port: 80
      ssl_certificate_id: "{{ ssl_certificate_id }}"
    health_check:
      ping_protocol: http
      ping_port: 9080
      ping_path: /management/health
      response_timeout: 5
      interval: 15
      unhealthy_threshold: 2
      healthy_threshold: 2
    purge_instance_ids: yes
    security_group_names:
    - codekvast-{{ stack.customer }}-{{ stack.env }}-frontend
    state: "{{ stack.state }}"
    subnets: "{{ subnet_id }}"
    tags: "{{ aws_common_tags }}"
    wait: yes
  register: elb

- debug: var=elb
  when: _debug is defined and _debug

- set_fact: elb_dns_name="{{ elb.elb.dns_name }}"

- name: Define load balancer's CNAMEs
  local_action:
    module: route53
    profile: codekvast # in ~/.boto
    command: create
    overwrite: yes
    record: "{{ item }}.codekvast.io"
    value: "{{ elb_dns_name }}"
    ttl: 3600
    type: CNAME
    zone: codekvast.io
  with_items: "{{ stack.app_cnames }}"

- name: Define database instances' CNAMEs
  local_action:
    module: route53
    profile: codekvast # in ~/.boto
    command: create
    overwrite: yes
    record: "{{ stack.db_cname }}{{ '%02d'|format(item.0) }}.codekvast.io"
    value: "{{ item.1.public_dns_name }}"
    ttl: 600
    type: CNAME
    zone: codekvast.io
  with_indexed_items: "{{ ec2database.tagged_instances }}"
  loop_control:
    label: "{{ item.1.public_dns_name }}"

- name: Tag database instances with their CNAMEs
  local_action:
    module: ec2_tag
    region: "{{ aws_region }}"
    profile: codekvast # in ~/.boto
    resource: "{{ item.1.id }}"
    tags:
      CNAME: "{{ stack.db_cname }}{{ '%02d'|format(item.0) }}.codekvast.io"
  with_indexed_items: "{{ ec2database.tagged_instances }}"
  loop_control:
    label: "{{ item.1.public_dns_name }}"

- name: Define application instances' api CNAMEs
  local_action:
    module: route53
    profile: codekvast # in ~/.boto
    command: create
    overwrite: yes
    record: "{{ stack.app_cnames[0] }}{{ '%02d'|format(item.0) }}.codekvast.io"
    value: "{{ item.1.public_dns_name }}"
    ttl: 60
    type: CNAME
    zone: codekvast.io
  with_indexed_items: "{{ ec2backends.tagged_instances }}"
  loop_control:
    label: "{{ item.1.public_dns_name }}"

- name: Define application instances' login CNAMEs
  local_action:
    module: route53
    profile: codekvast # in ~/.boto
    command: create
    overwrite: yes
    record: "{{ stack.app_cnames[1] }}{{ '%02d'|format(item.0) }}.codekvast.io"
    value: "{{ item.1.public_dns_name }}"
    ttl: 60
    type: CNAME
    zone: codekvast.io
  with_indexed_items: "{{ ec2backends.tagged_instances }}"
  loop_control:
    label: "{{ item.1.public_dns_name }}"

- name: Define application instances' dashboard CNAMEs
  local_action:
    module: route53
    profile: codekvast # in ~/.boto
    command: create
    overwrite: yes
    record: "{{ stack.app_cnames[2] }}{{ '%02d'|format(item.0) }}.codekvast.io"
    value: "{{ item.1.public_dns_name }}"
    ttl: 60
    type: CNAME
    zone: codekvast.io
  with_indexed_items: "{{ ec2backends.tagged_instances }}"
  loop_control:
    label: "{{ item.1.public_dns_name }}"

- name: Tag application instances with their CNAMEs
  local_action:
    module: ec2_tag
    region: "{{ aws_region }}"
    profile: codekvast # in ~/.boto
    resource: "{{ item.1.id }}"
    tags:
      CNAME: "{{ stack.app_cnames[0] }}{{ '%02d'|format(item.0) }}.codekvast.io"
      CNAME0: "{{ stack.app_cnames[0] }}{{ '%02d'|format(item.0) }}.codekvast.io"
      CNAME1: "{{ stack.app_cnames[1] }}{{ '%02d'|format(item.0) }}.codekvast.io"
      CNAME2: "{{ stack.app_cnames[2] }}{{ '%02d'|format(item.0) }}.codekvast.io"
      LBCNAME: "{{ stack.app_cnames[0] }}.codekvast.io"
      LBCNAME0: "{{ stack.app_cnames[0] }}.codekvast.io"
      LBCNAME1: "{{ stack.app_cnames[1] }}.codekvast.io"
      LBCNAME2: "{{ stack.app_cnames[2] }}.codekvast.io"
  with_indexed_items: "{{ ec2backends.tagged_instances }}"
  loop_control:
    label: "{{ item.1.public_dns_name }}"

- name: Create S3 bucket for database backups
  local_action:
    module: s3_bucket
    region: "{{ aws_region }}"
    profile: codekvast
    name: "{{ s3_database_backup_bucket }}"
    tags: "{{ aws_common_tags }}"

- name: Wait for OpenSSH on EC2 instances
  local_action:
    module: wait_for
    host: "{{ item }}"
    port: 22
    search_regex: OpenSSH
  with_items:
  - "{{ ec2database.tagged_instances|map(attribute='public_ip') | list }}"
  - "{{ ec2backends.tagged_instances|map(attribute='public_ip') | list }}"
