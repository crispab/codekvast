description 'Illustrates how to use Codekvast Collector together with AspectJ load-time weaver (LTW)'

apply from: "$rootDir/gradle/java-7.gradle"
apply plugin: 'application'

mainClassName = "sample.app.SampleApp"

configurations {
    codekvastagent
}

dependencies {
    compile "org.slf4j:slf4j-api:1.7.12"
    compile "aopalliance:aopalliance:1.0"
    compile 'com.google.inject:guice:4.0'
    compile project(":sample:sample-lib")

    runtimeOnly logback

    codekvastagent project(path: ":product:agent:java-agent", configuration: 'shadow')
    // codekvastagent "io.codekvast:codekvast-agent:0.24.0"
}

task generateCodekvastConfig {
    group "Build"
    description "Generates a codekvast.conf for test"

    def configFile = file("$buildDir/codekvast.conf")

    inputs.files file("build.gradle")
    outputs.file configFile

    doLast {
        configFile.parentFile.mkdirs()
        configFile.text = """# Run Codekvast against Sample App
appName = $archivesBaseName
appVersion = literal 1.3
aspectjOptions = -verbose -showWeaveInfo
codeBase = ${file("build/install/${project.name}/lib/")}
excludePackages = sample.lib.excluded
methodVisibility = all
packages = sample. , foo.bar.
tags = development, sample
bridgeAspectjMessagesToJUL = false
environment = Gradle

# serverUrl = https://api-staging.codekvast.io
httpProxyHost =   
httpProxyPort = 4711
"""
    }
}

application {
    applicationDefaultJvmArgs = [
        // "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005",
        "-javaagent:$configurations.codekvastagent.asPath",
        "-Dcodekvast.configuration=$generateCodekvastConfig.outputs.files.asPath"
    ]
}
installDist.dependsOn generateCodekvastConfig, ':product:agent:java-agent:shadowJar'
processResources.dependsOn generateCodekvastConfig

run {
    // Populate codeBase
    dependsOn installDist
}
