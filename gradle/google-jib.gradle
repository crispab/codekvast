apply plugin: 'com.google.cloud.tools.jib'

ext.jibExtraDirectories = ['build/jib-extra']

task jibCreateAgentProperties {
    group "jib"
    description "Creates a codekvast-agent.properties for use in Docker"

    def configFile = file("build/jib-extra/app/codekvast-agent.properties")

    inputs.property("codekvastVersion", codekvastDisplayVersion)
    inputs.file file("$rootDir/deploy/playbooks/vars/secrets.yml")

    outputs.file configFile

    doLast {
        configFile.parentFile.mkdirs()
        configFile.text = """
appName = ${archivesBaseName} 
appVersion = literal ${codekvastDisplayVersion}
codeBase = /app/classes, /app/libs 
# Exclude the packages that contain @Aspects, or else Spring AOP will not load them.
excludePackages = io.codekvast.common.aspects
hostname = \$HOSTNAME
licenseKey = ${getCodekvastLicenseKey()}
methodVisibility = all
packages = io.codekvast
serverUrl = https://api.codekvast.io
"""
    }
}

task jibFetchCodekvastJavaAgent(type: Sync) {
    from tasks.getByPath(":product:agent:java-agent:shadowJar").outputs.files
    into "build/jib-extra/app/agent"
}

jib {
    from {
        image = "azul/zulu-openjdk-alpine:${getOpenJdkVersion()}"
    }
    to {
        image = "${getAwsAccount()}.dkr.ecr.${getAwsRegion()}.amazonaws.com/codekvast/${archivesBaseName}"
        credHelper = 'ecr-login'
        tags = [codekvastDisplayVersion, 'latest']
    }
    container {
        jvmFlags = [
                '-XX:+ExitOnOutOfMemoryError',
//                '-XX:-UseContainerSupport',
//                '-Xmx300m',
                '-Dcodekvast.configuration=/app/codekvast-agent.properties',
                "-javaagent:/app/agent/codekvast-javaagent-${codekvastVersion}.jar".toString(),
                '-Dspring.devtools.restart.enabled=false'
        ]
        ports = ["8080", "9080"]
    }
    extraDirectories.paths = ['build/jib-extra']
}

task jibCollectExtra {
    group 'jib'
    description 'Placeholder for collecting stuff into build/jib-extra'
}

tasks.jib.dependsOn build, jibCreateAgentProperties, jibFetchCodekvastJavaAgent, jibCollectExtra

def getOpenJdkVersion() {
    def gradle_properties = file("$rootDir/gradle.properties").text
    def matcher = gradle_properties =~ ~/(?m)^sdkmanJavaDefault\s*[=:]\s*(.*)-zulu/
    assert matcher.find(): "Did not find sdkmanJavaDefault in $rootDir/gradle.properties"
    return matcher.group(1)
}

def getAwsRegion() {
    return "yq eval .aws_region $rootDir/deploy/playbooks/vars/common.yml".execute().in.text.trim()
}

def getAwsAccount() {
    return "yq eval .aws_account $rootDir/deploy/playbooks/vars/common.yml".execute().in.text.trim()
}

def getCodekvastLicenseKey() {
    return "yq eval .secrets.codekvast.agent.licenseKey $rootDir/deploy/playbooks/vars/secrets.yml".execute().in.text.trim()
}
