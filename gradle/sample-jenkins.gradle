apply plugin: 'java'
apply from: "$rootDir/gradle/libs.gradle"

configurations {
  codekvastagent
}

dependencies {
  codekvastagent project(path: ":product:agent:java-agent", configuration: 'shadow')
}

defaultTasks 'run'

def javaVersion = sdkmanJavaVersion_8
def tomcatVersion = "7.0.92"
def tomcatDownloadUrl = "https://downloads.codekvast.io/apache-tomcat-${tomcatVersion}.zip"
def tomcatDir = file("$buildDir/tomcat")
def catalinaBase = new File(tomcatDir, "apache-tomcat-${tomcatVersion}")
def catalinaWebapps = new File(catalinaBase, "webapps")
def jenkinsDownloadUrl = "https://downloads.codekvast.io/jenkins-${jenkinsVersion}.war"

task installJenkinsWarInTomcat {
  def downloadDir = file("$rootDir/.tmp/download")
  def jenkinsDir = new File(catalinaWebapps, "jenkins")

  dependsOn ':product:agent:java-agent:shadowJar'

  inputs.property "javaVersion", javaVersion
  inputs.property "tomcatVersion", tomcatVersion
  inputs.property "tomcatDownloadUrl", tomcatDownloadUrl
  inputs.property "jenkinsVersion", jenkinsVersion
  inputs.property "jenkinsDownloadUrl", jenkinsDownloadUrl
  inputs.files file("build.gradle")
  outputs.dir tomcatDir

  doLast {
    downloadDir.mkdirs()
    catalinaWebapps.mkdirs()

    logger.lifecycle "Downloading $tomcatDownloadUrl ..."
    ant.get(src: tomcatDownloadUrl,
      dest: downloadDir,
      usetimestamp: true,
      verbose: true)

    logger.lifecycle "Unpacking Tomcat into $tomcatDir ..."
    copy {
      from zipTree("$downloadDir/apache-tomcat-${tomcatVersion}.zip")
      into tomcatDir
    }
    "chmod +x $catalinaBase/bin/catalina.sh".execute().waitFor()

    logger.lifecycle "Setting HTTP port $tomcatPort..."
    def serverXml = file("$catalinaBase/conf/server.xml")
    serverXml.text = serverXml.text.replace("8080", tomcatPort).replace("8005", "0").replace("8009", "0")

    logger.lifecycle "Downloading $jenkinsDownloadUrl into $downloadDir ..."
    ant.get(src: jenkinsDownloadUrl,
      dest: downloadDir,
      usetimestamp: true,
      verbose: true)

    logger.lifecycle "Copying jenkins.war into $catalinaWebapps ..."
    copy {
      from "$downloadDir/jenkins-${jenkinsVersion}.war"
      into catalinaWebapps
      rename { "jenkins.war" }
    }

    if (jenkinsDir.exists()) {
      logger.lifecycle "Deleting old exploded jenkins dir..."
      delete jenkinsDir
    }
    logger.lifecycle "Jenkins downloaded and deployed to Tomcat."
  }
}

task generateCodekvastConfig {
  group "Build"
  description "Generates a codekvast.conf for test"
  dependsOn ":product:agent:java-agent:assemble"

  ext.configFile = file("$buildDir/codekvast.conf")

  inputs.files file("$rootDir/product/build.gradle")
  inputs.files file("build.gradle")
  outputs.file configFile

  doLast {
    configFile.parentFile.mkdirs()
    configFile.text = """# Run Codekvast against Jenkins in Tomcat
#aspectjOptions = -verbose -showWeaveInfo
bridgeAspectjMessagesToJUL = false
appVersion = manifest jenkins-cli.jar Jenkins-CLI-Version
codeBase = $catalinaBase/webapps/jenkins, $catalinaBase/lib, ${System.getenv("HOME")}/.jenkins/plugins
methodVisibility = private
packages = hudson, jenkins
tags = development, sample
environment = Gradle

#serverUrl = https://api-staging.codekvast.io
"""
  }
}

processResources.dependsOn generateCodekvastConfig

task generateTomcatSetenvSh {
  description = "Generates a \$CATALINA_HOME/bin/setenv.sh that sets JAVA_HOME and hooks up Codekvast"
  group = "build"

  dependsOn installJenkinsWarInTomcat, generateCodekvastConfig
  def setenvFile = file("$catalinaBase/bin/setenv.sh")

  inputs.files file("build.gradle")
  outputs.file setenvFile

  doLast {
    def codekvastAgent = configurations.codekvastagent.asPath
    def loggingProperties = file("$buildDir/logging.properties")
    def logFile = file("$buildDir/log/tomcat.log")
    logFile.parentFile.mkdirs()

    if (!loggingProperties.exists()) {
      logger.lifecycle "Creating $loggingProperties ..."
      loggingProperties.text = """
handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler

java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.FileHandler.level = ALL
java.util.logging.FileHandler.pattern = $logFile
java.util.logging.FileHandler.limit = 10000000

java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.ConsoleHandler.level = ALL

java.util.logging.SimpleFormatter.format = %1\$tF %1\$tT [%4\$s] %3\$s - %5\$s%6\$s%n

io.codekvast.aspectjweaver.level = INFO
io.codekvast.javaagent.level = FINE
"""
    }

    println """---------------------------
codekvastAgent = $codekvastAgent
-------------------------"""
    setenvFile.text = """
JAVA_HOME=${System.getenv('HOME')}/.sdkman/candidates/java/$javaVersion
CATALINA_OPTS="-javaagent:$codekvastAgent -Dcodekvast.configuration=$generateCodekvastConfig.configFile"
LOGGING_CONFIG="-Djava.util.logging.config.file=$loggingProperties"
LOGGING_MANAGER="-Djava.util.logging.manager=java.util.logging.LogManager"
"""
  }
}

task run(type: Exec) {
  description = "Run Jenkins with Codekvast Collector attached"
  group = "application"
  dependsOn generateTomcatSetenvSh
  commandLine "$catalinaBase/bin/catalina.sh", "run"

  // Illustrate that config can be injected from environment variables
  environment['CODEKVAST_APP_NAME'] = 'Jenkins'
}
