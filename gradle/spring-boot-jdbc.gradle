//-----------------------------------------------------------------------------------------------------------------------------
// Common stuff for any Spring Boot app that uses JDBC
//-----------------------------------------------------------------------------------------------------------------------------
apply plugin: 'org.flywaydb.flyway'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation "org.flywaydb:flyway-core:$flywayVersion"

    runtimeOnly 'com.zaxxer:HikariCP'
    runtimeOnly mariadbDriver
}

task startMariadb {
    description "Starts MariaDB $mariadbVersion in a Docker container, on port 3306"

    outputs.upToDateWhen {
        "docker ps".execute().in.text.contains("codekvast_database")
    }

    doLast {
        def created = "docker ps -a".execute().in.text.contains("codekvast_database")
        if (created) {
            def command = "docker start codekvast_database"
            logger.lifecycle(command)
            assert command.execute().waitFor() == 0
        } else {
            def command = "docker pull mariadb:$mariadbVersion"
            logger.lifecycle(command)
            assert command.execute().waitFor() == 0

            def mysql_datadir = "${System.getenv('HOME')}/.codekvast_database"
            command = "mkdir -p $mysql_datadir"
            logger.lifecycle(command)
            assert command.execute().waitFor() == 0

            command = 'docker run -d --restart=unless-stopped ' +
                '--name codekvast_database ' +
                '-p 3306:3306 ' +
                "-v $mysql_datadir:/var/lib/mysql " +
                '-e MYSQL_ROOT_PASSWORD=root ' +
                '-e MYSQL_DATABASE=codekvast ' +
                '-e MYSQL_USER=codekvast ' +
                '-e MYSQL_PASSWORD=codekvast ' +
                '-e MYSQL_INITDB_SKIP_TZINFO=true ' +
                '-e TERM=xterm-256color ' +
                'mariadb:' + mariadbVersion + ' ' +
                '--character-set-server=utf8 '
            logger.lifecycle(command)
            assert command.execute().waitFor() == 0
        }
    }
}

task startRabbitMQ {
    description "Starts RabbitMQ $rabbitmqVersion in a Docker container, on port xxxx"

    outputs.upToDateWhen {
        "docker ps".execute().in.text.contains("codekvast_rabbitmq")
    }

    doLast {
        def created = "docker ps -a".execute().in.text.contains("codekvast_rabbitmq")
        if (created) {
            def command = "docker start codekvast_rabbitmq"
            logger.lifecycle(command)
            assert command.execute().waitFor() == 0
        } else {
            def command = "docker pull rabbitmq:$rabbitmqVersion"
            logger.lifecycle(command)
            assert command.execute().waitFor() == 0

            command = 'docker run -d --restart=unless-stopped ' +
                '--name codekvast_rabbitmq ' +
                '-p 4369:4369 -p 5671:5671 -p 5672:5672 -p 25672:25672' +
                'rabbitmq:' + rabbitmqVersion
            logger.lifecycle(command)
            assert command.execute().waitFor() == 0
        }
    }
}

flyway {
    url = 'jdbc:mariadb://localhost/codekvast'
    user = 'codekvast'
    password = 'codekvast'
    validateOnMigrate = false
    locations = ["filesystem:$rootDir/product/server/db-migration/src/main/resources/db/migration/"]
}
