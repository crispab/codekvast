apply plugin: 'java'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'jacoco'
apply from: "$rootDir/gradle/libs.gradle"

uptodate {
    group "Backend Development"

    connectionTimeout 20000
    addExcludedVersionPatterns '.*-alpha.*'
    addExcludedVersionPatterns '.*-beta.*'
    addExcludedVersionPatterns '.*-rc.*'
    addExcludedVersionPatterns '.*\\.pr[0-9]+$'
    addExcludedVersionPatterns '.*-b[0-9]+$'
    addExcludedVersionPatterns '.*-[0-9]$'
    addExcludedVersionPatterns '.*-android$'
}

jar {
    manifest {
        attributes(
                "Implementation-Title": archivesBaseName,
                "Implementation-Version": codekvastDisplayVersion
        )
    }
}

dependencies {
    annotationProcessor lombok
    compileOnly lombok

    testCompileOnly lombok
}

configurations.forEach { it ->
    def config = it
    def configName = config.name
    def taskName = "sync${configName.capitalize()}Dependencies"

    task "$taskName"(type: Sync) {
        group = "Troubleshooting"
        description = "Syncs $configName dependencies into build/deps/$configName"

        from config
        into "$buildDir/deps/$configName"
    }
}

task coverageReport(type: JacocoReport) {
    group 'Documentation'
    description 'Generates a test coverage report'
    sourceSets sourceSets.main

    // One could do
    // executionData test, integrationTest, run
    // but then *all* of build/jacoco/test.exec, integrationTest.exec and run.exec  must exist, or else the report will be skipped.
    // Instead, build a report on what execution data we happen to have.

    enabled = false
    def jacocoDir = file('build/jacoco')
    if (jacocoDir.exists()) {
        jacocoDir.eachFileMatch(~/.*\.exec/) { executionData it; enabled = true }
    }

    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }

}
build.dependsOn coverageReport

// TODO: Run javadoc on delomboked code
javadoc {
    title  "Codekvast version $codekvastDisplayVersion"
    failOnError = false
}
